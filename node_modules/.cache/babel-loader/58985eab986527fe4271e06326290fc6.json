{"ast":null,"code":"var _jsxFileName = \"/Users/seanjohnson/Desktop/Projects/dev-projects/create-react-app/src/components/Form/Form.js\";\nimport React from 'react';\nimport Button from '@material-ui/core/Button';\nimport Grid from '@material-ui/core/Grid';\nimport { ValidatorForm, TextValidator } from 'react-material-ui-form-validator';\nimport { env } from '../../config';\nexport default class Form extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      formData: {\n        name: '',\n        email: '',\n        message: ''\n      },\n      submitted: false,\n      formEmailSent: false // feedback: '',\n      // formSubmitted: false,\n\n    };\n\n    this.handleChange = event => {\n      const {\n        formData\n      } = this.state;\n      formData[event.target.name] = event.target.value;\n      this.setState({\n        formData\n      });\n    };\n\n    this.handleSubmit = event => {\n      console.log('onSubmit Triggered');\n      event.preventDefault();\n      const {\n        formData\n      } = this.state;\n      let templateParams = {\n        \"reply_to\": `${formData.email}`,\n        \"from_name\": `${formData.name}`,\n        \"to_name\": \"Sean Johnson\",\n        \"message_html\": `${formData.message}`\n      };\n      var service_id = \"default_service\";\n      var template_id = \"template_KhFkHgO5\";\n      emailjs.send(service_id, template_id, template_params); // let {\n      //   REACT_APP_EMAILJS_RECEIVER: receiverEmail,\n      //   REACT_APP_EMAILJS_TEMPLATEID: template,\n      //   REACT_APP_EMAILJS_USERID: user,\n      // } = env;\n      // Move to .env and import\n      // const receiverEmail = \"receiver@example.com\"\n\n      const user = \"user_BEkLEnTF6bQFSTShemciw\";\n      const templateId = \"template_KhFkHgO5\";\n      console.log('env', env);\n      this.sendFeedback(templateId, templateParams, user);\n      this.setState({\n        submitted: true\n      }, () => {\n        setTimeout(() => this.setState({\n          submitted: false\n        }), 5000);\n      });\n    };\n\n    this.sendFeedback = (templateId, templateParams, user) => {\n      console.log('send feedback triggered');\n      window.emailjs.send('default_service', templateId, templateParams, user).then(res => {\n        console.log('res', res);\n        this.setState({\n          formEmailSent: true\n        });\n      }) // Handle errors here however you like\n      .catch(err => console.error('Failed to send feedback. Error: ', err));\n    };\n  }\n\n  handleCancel() {\n    this.setState({\n      formData: {\n        name: '',\n        email: '',\n        message: ''\n      }\n    });\n  }\n\n  render() {\n    const {\n      formData,\n      submitted\n    } = this.state;\n    return React.createElement(ValidatorForm, {\n      ref: \"form\",\n      onSubmit: this.handleSubmit,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 97\n      },\n      __self: this\n    }, React.createElement(Grid, {\n      container: true,\n      item: true,\n      xs: 12,\n      sm: 8,\n      direction: \"row\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 101\n      },\n      __self: this\n    }, React.createElement(Grid, {\n      item: true,\n      xs: 12,\n      sm: 5,\n      style: {\n        marginBottom: 15,\n        marginRight: 15\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 102\n      },\n      __self: this\n    }, React.createElement(TextValidator, {\n      fullWidth: true,\n      label: \"Name\",\n      onChange: this.handleChange,\n      name: \"name\",\n      variant: \"outlined\",\n      value: formData.name,\n      validators: ['required'],\n      errorMessages: ['Required'],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 103\n      },\n      __self: this\n    })), React.createElement(Grid, {\n      item: true,\n      xs: 12,\n      sm: 5,\n      style: {\n        marginBottom: 15\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 114\n      },\n      __self: this\n    }, React.createElement(TextValidator, {\n      fullWidth: true,\n      label: \"Email\",\n      onChange: this.handleChange,\n      name: \"email\",\n      variant: \"outlined\",\n      value: formData.email,\n      validators: ['required', 'isEmail'],\n      errorMessages: ['Required', 'Email is not valid'],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 115\n      },\n      __self: this\n    })), React.createElement(TextValidator, {\n      fullWidth: true,\n      label: \"Message\",\n      onChange: this.handleChange,\n      multiline: true,\n      rows: 5,\n      variant: \"outlined\",\n      name: \"message\",\n      value: formData.message,\n      validators: ['required'],\n      errorMessages: ['Required'],\n      style: {\n        marginBottom: 15\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 126\n      },\n      __self: this\n    }), React.createElement(Button, {\n      color: \"primary\",\n      variant: \"contained\",\n      type: \"submit\",\n      disabled: submitted,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 139\n      },\n      __self: this\n    }, submitted && 'Sent!' || !submitted && 'Send')));\n  }\n\n}","map":{"version":3,"sources":["/Users/seanjohnson/Desktop/Projects/dev-projects/create-react-app/src/components/Form/Form.js"],"names":["React","Button","Grid","ValidatorForm","TextValidator","env","Form","Component","state","formData","name","email","message","submitted","formEmailSent","handleChange","event","target","value","setState","handleSubmit","console","log","preventDefault","templateParams","service_id","template_id","emailjs","send","template_params","user","templateId","sendFeedback","setTimeout","window","then","res","catch","err","error","handleCancel","render","marginBottom","marginRight"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,MAAP,MAAmB,0BAAnB;AACA,OAAOC,IAAP,MAAiB,wBAAjB;AACA,SAASC,aAAT,EAAwBC,aAAxB,QAA6C,kCAA7C;AACA,SAASC,GAAT,QAAoB,cAApB;AAEA,eAAe,MAAMC,IAAN,SAAmBN,KAAK,CAACO,SAAzB,CAAmC;AAAA;AAAA;AAAA,SAC9CC,KAD8C,GACtC;AACJC,MAAAA,QAAQ,EAAE;AACNC,QAAAA,IAAI,EAAE,EADA;AAENC,QAAAA,KAAK,EAAE,EAFD;AAGNC,QAAAA,OAAO,EAAE;AAHH,OADN;AAMJC,MAAAA,SAAS,EAAE,KANP;AAOJC,MAAAA,aAAa,EAAE,KAPX,CAQJ;AACA;;AATI,KADsC;;AAAA,SAa9CC,YAb8C,GAa9BC,KAAD,IAAW;AACtB,YAAM;AAAEP,QAAAA;AAAF,UAAe,KAAKD,KAA1B;AACAC,MAAAA,QAAQ,CAACO,KAAK,CAACC,MAAN,CAAaP,IAAd,CAAR,GAA8BM,KAAK,CAACC,MAAN,CAAaC,KAA3C;AACA,WAAKC,QAAL,CAAc;AAAEV,QAAAA;AAAF,OAAd;AACH,KAjB6C;;AAAA,SAmB9CW,YAnB8C,GAmB9BJ,KAAD,IAAW;AACxBK,MAAAA,OAAO,CAACC,GAAR,CAAY,oBAAZ;AACAN,MAAAA,KAAK,CAACO,cAAN;AAEA,YAAM;AAAEd,QAAAA;AAAF,UAAe,KAAKD,KAA1B;AAEA,UAAIgB,cAAc,GAAG;AACnB,oBAAa,GAAEf,QAAQ,CAACE,KAAM,EADX;AAEnB,qBAAc,GAAEF,QAAQ,CAACC,IAAK,EAFX;AAGnB,mBAAW,cAHQ;AAInB,wBAAiB,GAAED,QAAQ,CAACG,OAAQ;AAJjB,OAArB;AAOD,UAAIa,UAAU,GAAG,iBAAjB;AACA,UAAIC,WAAW,GAAG,mBAAlB;AACAC,MAAAA,OAAO,CAACC,IAAR,CAAaH,UAAb,EAAyBC,WAAzB,EAAsCG,eAAtC,EAfyB,CAiBxB;AACA;AACA;AACA;AACA;AAEA;AACA;;AACA,YAAMC,IAAI,GAAG,4BAAb;AACA,YAAMC,UAAU,GAAG,mBAAnB;AAEAV,MAAAA,OAAO,CAACC,GAAR,CAAY,KAAZ,EAAmBjB,GAAnB;AAEA,WAAK2B,YAAL,CACED,UADF,EAEEP,cAFF,EAGEM,IAHF;AAMA,WAAKX,QAAL,CAAc;AAAEN,QAAAA,SAAS,EAAE;AAAb,OAAd,EAAmC,MAAM;AACvCoB,QAAAA,UAAU,CAAC,MAAM,KAAKd,QAAL,CAAc;AAAEN,UAAAA,SAAS,EAAE;AAAb,SAAd,CAAP,EAA4C,IAA5C,CAAV;AACD,OAFD;AAGD,KA1D6C;;AAAA,SA8D9CmB,YA9D8C,GA8D/B,CAACD,UAAD,EAAaP,cAAb,EAA6BM,IAA7B,KAAsC;AACnDT,MAAAA,OAAO,CAACC,GAAR,CAAY,yBAAZ;AACAY,MAAAA,MAAM,CAACP,OAAP,CACCC,IADD,CACM,iBADN,EACyBG,UADzB,EACqCP,cADrC,EACqDM,IADrD,EAECK,IAFD,CAEMC,GAAG,IAAI;AACXf,QAAAA,OAAO,CAACC,GAAR,CAAY,KAAZ,EAAmBc,GAAnB;AACA,aAAKjB,QAAL,CAAc;AACZL,UAAAA,aAAa,EAAE;AADH,SAAd;AAGD,OAPD,EAQA;AARA,OASCuB,KATD,CASOC,GAAG,IAAIjB,OAAO,CAACkB,KAAR,CAAc,kCAAd,EAAkDD,GAAlD,CATd;AAUD,KA1E6C;AAAA;;AA6E9CE,EAAAA,YAAY,GAAG;AACb,SAAKrB,QAAL,CAAc;AACZV,MAAAA,QAAQ,EAAE;AACRC,QAAAA,IAAI,EAAE,EADE;AAERC,QAAAA,KAAK,EAAE,EAFC;AAGRC,QAAAA,OAAO,EAAE;AAHD;AADE,KAAd;AAOD;;AAED6B,EAAAA,MAAM,GAAG;AACL,UAAM;AAAEhC,MAAAA,QAAF;AAAYI,MAAAA;AAAZ,QAA0B,KAAKL,KAArC;AACA,WACI,oBAAC,aAAD;AACE,MAAA,GAAG,EAAC,MADN;AAEE,MAAA,QAAQ,EAAE,KAAKY,YAFjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAIE,oBAAC,IAAD;AAAM,MAAA,SAAS,MAAf;AAAgB,MAAA,IAAI,MAApB;AAAqB,MAAA,EAAE,EAAE,EAAzB;AAA6B,MAAA,EAAE,EAAE,CAAjC;AAAoC,MAAA,SAAS,EAAC,KAA9C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACA,oBAAC,IAAD;AAAM,MAAA,IAAI,MAAV;AAAW,MAAA,EAAE,EAAE,EAAf;AAAmB,MAAA,EAAE,EAAE,CAAvB;AAA0B,MAAA,KAAK,EAAE;AAAEsB,QAAAA,YAAY,EAAE,EAAhB;AAAoBC,QAAAA,WAAW,EAAE;AAAjC,OAAjC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,oBAAC,aAAD;AACE,MAAA,SAAS,MADX;AAEE,MAAA,KAAK,EAAC,MAFR;AAGE,MAAA,QAAQ,EAAE,KAAK5B,YAHjB;AAIE,MAAA,IAAI,EAAC,MAJP;AAKE,MAAA,OAAO,EAAC,UALV;AAME,MAAA,KAAK,EAAEN,QAAQ,CAACC,IANlB;AAOE,MAAA,UAAU,EAAE,CAAC,UAAD,CAPd;AAQE,MAAA,aAAa,EAAE,CAAC,UAAD,CARjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,CADA,EAaA,oBAAC,IAAD;AAAM,MAAA,IAAI,MAAV;AAAW,MAAA,EAAE,EAAE,EAAf;AAAmB,MAAA,EAAE,EAAE,CAAvB;AAA0B,MAAA,KAAK,EAAE;AAAEgC,QAAAA,YAAY,EAAE;AAAhB,OAAjC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,oBAAC,aAAD;AACE,MAAA,SAAS,MADX;AAEE,MAAA,KAAK,EAAC,OAFR;AAGE,MAAA,QAAQ,EAAE,KAAK3B,YAHjB;AAIE,MAAA,IAAI,EAAC,OAJP;AAKE,MAAA,OAAO,EAAC,UALV;AAME,MAAA,KAAK,EAAEN,QAAQ,CAACE,KANlB;AAOE,MAAA,UAAU,EAAE,CAAC,UAAD,EAAa,SAAb,CAPd;AAQE,MAAA,aAAa,EAAE,CAAC,UAAD,EAAa,oBAAb,CARjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,CAbA,EAyBA,oBAAC,aAAD;AACE,MAAA,SAAS,MADX;AAEE,MAAA,KAAK,EAAC,SAFR;AAGE,MAAA,QAAQ,EAAE,KAAKI,YAHjB;AAIE,MAAA,SAAS,MAJX;AAKE,MAAA,IAAI,EAAE,CALR;AAME,MAAA,OAAO,EAAC,UANV;AAOE,MAAA,IAAI,EAAC,SAPP;AAQE,MAAA,KAAK,EAAEN,QAAQ,CAACG,OARlB;AASE,MAAA,UAAU,EAAE,CAAC,UAAD,CATd;AAUE,MAAA,aAAa,EAAE,CAAC,UAAD,CAVjB;AAWE,MAAA,KAAK,EAAE;AAAE8B,QAAAA,YAAY,EAAE;AAAhB,OAXT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAzBA,EAsCA,oBAAC,MAAD;AACE,MAAA,KAAK,EAAC,SADR;AAEE,MAAA,OAAO,EAAC,WAFV;AAGE,MAAA,IAAI,EAAC,QAHP;AAIE,MAAA,QAAQ,EAAE7B,SAJZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAMEA,SAAS,IAAI,OAAd,IAA2B,CAACA,SAAD,IAAc,MAN1C,CAtCA,CAJF,CADJ;AAsDH;;AA/I6C","sourcesContent":["import React from 'react';\nimport Button from '@material-ui/core/Button';\nimport Grid from '@material-ui/core/Grid';\nimport { ValidatorForm, TextValidator } from 'react-material-ui-form-validator';\nimport { env } from '../../config';\n\nexport default class Form extends React.Component {\n    state = {\n        formData: {\n            name: '',\n            email: '',\n            message: ''\n        },\n        submitted: false,\n        formEmailSent: false\n        // feedback: '',\n        // formSubmitted: false,\n    }\n\n    handleChange = (event) => {\n        const { formData } = this.state;\n        formData[event.target.name] = event.target.value;\n        this.setState({ formData });\n    }\n\n    handleSubmit = (event) => {\n      console.log('onSubmit Triggered')\n      event.preventDefault();\n\n      const { formData } = this.state\n\n      let templateParams = {\n        \"reply_to\": `${formData.email}`,\n        \"from_name\": `${formData.name}`,\n        \"to_name\": \"Sean Johnson\",\n        \"message_html\": `${formData.message}`\n      }\n     \n     var service_id = \"default_service\";\n     var template_id = \"template_KhFkHgO5\";\n     emailjs.send(service_id, template_id, template_params);\n  \n      // let {\n      //   REACT_APP_EMAILJS_RECEIVER: receiverEmail,\n      //   REACT_APP_EMAILJS_TEMPLATEID: template,\n      //   REACT_APP_EMAILJS_USERID: user,\n      // } = env;\n\n      // Move to .env and import\n      // const receiverEmail = \"receiver@example.com\"\n      const user = \"user_BEkLEnTF6bQFSTShemciw\"\n      const templateId = \"template_KhFkHgO5\"\n\n      console.log('env', env)\n  \n      this.sendFeedback(\n        templateId,\n        templateParams,\n        user\n      );\n\n      this.setState({ submitted: true }, () => {\n        setTimeout(() => this.setState({ submitted: false }), 5000);\n      });\n    }\n\n    // Note: this is using default_service, which will map to whatever\n    // default email provider you've set in your EmailJS account.\n    sendFeedback = (templateId, templateParams, user) => {\n      console.log('send feedback triggered')\n      window.emailjs\n      .send('default_service', templateId, templateParams, user)\n      .then(res => {\n        console.log('res', res)\n        this.setState({\n          formEmailSent: true\n        });\n      })\n      // Handle errors here however you like\n      .catch(err => console.error('Failed to send feedback. Error: ', err));\n    }\n\n\n    handleCancel() {\n      this.setState({\n        formData: {\n          name: '',\n          email: '',\n          message: ''\n        }\n      });\n    }\n\n    render() {\n        const { formData, submitted } = this.state;\n        return (\n            <ValidatorForm\n              ref=\"form\"\n              onSubmit={this.handleSubmit}\n            >\n              <Grid container item xs={12} sm={8} direction=\"row\">\n              <Grid item xs={12} sm={5} style={{ marginBottom: 15, marginRight: 15 }}>\n                <TextValidator\n                  fullWidth\n                  label=\"Name\"\n                  onChange={this.handleChange}\n                  name=\"name\"\n                  variant=\"outlined\"\n                  value={formData.name}\n                  validators={['required']}\n                  errorMessages={['Required']}\n                />\n              </Grid>\n              <Grid item xs={12} sm={5} style={{ marginBottom: 15 }}>\n                <TextValidator\n                  fullWidth\n                  label=\"Email\"\n                  onChange={this.handleChange}\n                  name=\"email\"\n                  variant=\"outlined\"\n                  value={formData.email}\n                  validators={['required', 'isEmail']}\n                  errorMessages={['Required', 'Email is not valid']}\n                />\n              </Grid>\n              <TextValidator\n                fullWidth\n                label=\"Message\"\n                onChange={this.handleChange}\n                multiline\n                rows={5}\n                variant=\"outlined\"\n                name=\"message\"\n                value={formData.message}\n                validators={['required']}\n                errorMessages={['Required']}\n                style={{ marginBottom: 15 }}\n              />\n              <Button\n                color=\"primary\"\n                variant=\"contained\"\n                type=\"submit\"\n                disabled={submitted}\n              >\n              {(submitted && 'Sent!') || (!submitted && 'Send')}\n              </Button>\n              </Grid>\n            </ValidatorForm>\n        );\n    }\n}"]},"metadata":{},"sourceType":"module"}